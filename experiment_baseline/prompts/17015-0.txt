
1. **Informal Theorem**  
Chain Rule for Strict Derivatives in Normed Algebras: \((h_2 \circ h)'(x) = h_2'(h(x)) \cdot h'(x)\) : For any nontrivially normed fields \(\mathbb{K}\) and \(\mathbb{K}'\) with \(\mathbb{K}'\) being a normed algebra over \(\mathbb{K}\), and for any functions \( h : \mathbb{K} \to \mathbb{K}' \) and \( h_2 : \mathbb{K}' \to \mathbb{K}' \), if \( h_2 \) has a strict derivative \( h_2' \) at \( h(x) \) and \( h \) has a strict derivative \( h' \) at \( x \), then the composition \( h_2 \circ h \) has a strict derivative \( h_2' \cdot h' \) at \( x \).

2. **Informal Proof**  
We start by noting that the multiplication in a commutative magma is commutative. Therefore, we can rewrite the goal to show that the strict derivative of \( h_2 \circ h \) at \( x \) is \( h' \cdot h_2' \) instead of \( h_2' \cdot h' \).

Next, we apply the chain rule for strict derivatives. According to the chain rule, if \( h_2 \) has a strict derivative \( h_2' \) at \( h(x) \) and \( h \) has a strict derivative \( h' \) at \( x \), then the composition \( h_2 \circ h \) has a strict derivative \( h' \cdot h_2' \) at \( x \).

Thus, the strict derivative of \( h_2 \circ h \) at \( x \) is indeed \( h' \cdot h_2' \). This completes the proof. \(\blacksquare\)

3. **Formal Theorem**  
example (hh₂ : HasStrictDerivAt h₂ h₂' (h x)) (hh : HasStrictDerivAt h h' x) :
    HasStrictDerivAt (h₂ ∘ h) (h₂' * h') x := by sorry

4. **Prefix**
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Calculus.FDeriv.Comp
import Mathlib.Analysis.Calculus.FDeriv.RestrictScalars
import Mathlib.Analysis.Calculus.Deriv.Comp

open HasStrictDerivAt
open scoped Classical Topology Filter ENNReal
open Filter Asymptotics Set
open ContinuousLinearMap (smulRight smulRight_one_eq_iff)
variable {𝕜 : Type u} [NontriviallyNormedField 𝕜]
variable {F : Type v} [NormedAddCommGroup F] [NormedSpace 𝕜 F]
variable {E : Type w} [NormedAddCommGroup E] [NormedSpace 𝕜 E]
variable {f f₀ f₁ g : 𝕜 → F}
variable {f' f₀' f₁' g' : F}
variable {x : 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {F : Type v} [NormedAddCommGroup F] [NormedSpace 𝕜 F]
variable {E : Type w} [NormedAddCommGroup E] [NormedSpace 𝕜 E]
variable {f f₀ f₁ g : 𝕜 → F}
variable {f' f₀' f₁' g' : F}
variable {x : 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {E : Type w} [NormedAddCommGroup E] [NormedSpace 𝕜 E]
variable {f f₀ f₁ g : 𝕜 → F}
variable {f' f₀' f₁' g' : F}
variable {x : 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {f f₀ f₁ g : 𝕜 → F}
variable {f' f₀' f₁' g' : F}
variable {x : 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {f' f₀' f₁' g' : F}
variable {x : 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {x : 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {s t : Set 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {L L₁ L₂ : Filter 𝕜}
variable {𝕜' : Type*} [NontriviallyNormedField 𝕜'] [NormedAlgebra 𝕜 𝕜'] [NormedSpace 𝕜' F]
  [IsScalarTower 𝕜 𝕜' F] {s' t' : Set 𝕜'} {h : 𝕜 → 𝕜'} {h₁ : 𝕜 → 𝕜} {h₂ : 𝕜' → 𝕜'} {h' h₂' : 𝕜'}
  {h₁' : 𝕜} {g₁ : 𝕜' → F} {g₁' : F} {L' : Filter 𝕜'} {y : 𝕜'} (x)

example (hh₂ : HasStrictDerivAt h₂ h₂' (h x)) (hh : HasStrictDerivAt h h' x) :
    HasStrictDerivAt (h₂ ∘ h) (h₂' * h') x := by
