
1. **Informal Theorem**  
Almost Everywhere Measurability of Function from Real and Imaginary Parts : For any type \(\alpha\) and a real or complex-like field \(\mathbb{ùïú}\), if a function \( f : \alpha \to \mathbb{ùïú} \) is almost everywhere measurable with respect to a measure \(\mu\) on \(\alpha\) in both its real and imaginary parts, then \( f \) itself is almost everywhere measurable with respect to \(\mu\). Formally, if \( \text{AEMeasurable}(\text{Re}(f), \mu) \) and \( \text{AEMeasurable}(\text{Im}(f), \mu) \), then \( \text{AEMeasurable}(f, \mu) \).

2. **Informal Proof**  
To prove that \( f \) is almost everywhere measurable, we start by noting that the real part \( \text{Re}(f) \) and the imaginary part \( \text{Im}(f) \) of \( f \) are both almost everywhere measurable with respect to the measure \(\mu\).

1. **Step 1:**
We use the fact that the sum of two almost everywhere measurable functions is almost everywhere measurable. Specifically, we consider the real part of \( f \) and the imaginary part of \( f \) multiplied by the imaginary unit \( i \). Since the real part \( \text{Re}(f) \) and the imaginary part \( \text{Im}(f) \) are both almost everywhere measurable, and the canonical coercion from real numbers to the real or complex-like field is measurable, the functions \( \text{Re}(f) \) and \( \text{Im}(f) \cdot i \) are almost everywhere measurable. Therefore, their sum \( \text{Re}(f) + \text{Im}(f) \cdot i \) is almost everywhere measurable. We need to show that this sum is equal to \( f \).

2. **Step 2:**
We use the property that for any element \( z \) in a real or complex-like field, the sum of its real part and its imaginary part multiplied by the imaginary unit \( i \) is equal to \( z \). This property is symmetric, so we can write \( f(x) = \text{Re}(f(x)) + \text{Im}(f(x)) \cdot i \). This completes the proof that \( f \) is almost everywhere measurable.

Thus, we have shown that if \( \text{AEMeasurable}(\text{Re}(f), \mu) \) and \( \text{AEMeasurable}(\text{Im}(f), \mu) \), then \( \text{AEMeasurable}(f, \mu) \). This completes the proof. \(\blacksquare\)

3. **Formal Theorem**  
example (hre : AEMeasurable (fun x => RCLike.re (f x)) Œº)
    (him : AEMeasurable (fun x => RCLike.im (f x)) Œº) : AEMeasurable f Œº := by sorry

4. **Prefix**
import Mathlib.Analysis.RCLike.Lemmas
import Mathlib.MeasureTheory.Constructions.BorelSpace.Complex
import Mathlib.MeasureTheory.Function.SpecialFunctions.RCLike


open NNReal ENNReal
variable {ùïú : Type*} [RCLike ùïú]
variable {Œ± ùïú : Type*} [RCLike ùïú] {m : MeasurableSpace Œ±} {f : Œ± ‚Üí ùïú}
  {Œº : MeasureTheory.Measure Œ±}
variable {Œ± ùïú : Type*} [RCLike ùïú] [MeasurableSpace Œ±] {f : Œ± ‚Üí ùïú} {Œº : MeasureTheory.Measure Œ±}

example (hre : AEMeasurable (fun x => RCLike.re (f x)) Œº)
    (him : AEMeasurable (fun x => RCLike.im (f x)) Œº) : AEMeasurable f Œº := by

5. **Header Information**  
-- BEGIN Mathlib.Analysis.RCLike.Lemmas --
/-
Copyright (c) 2020 Fr√©d√©ric Dupuis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fr√©d√©ric Dupuis
-/
import Mathlib.Analysis.Normed.Module.FiniteDimension
import Mathlib.Analysis.RCLike.Basic

/-! # Further lemmas about `RCLike` -/

open scoped Finset

variable {K E : Type*} [RCLike K]

namespace Polynomial

theorem ofReal_eval (p : ‚Ñù[X]) (x : ‚Ñù) : (‚Üë(p.eval x) : K) = aeval (‚Üëx) p :=
  (@aeval_algebraMap_apply_eq_algebraMap_eval ‚Ñù K _ _ _ x p).symm

end Polynomial

variable (K) in
lemma RCLike.span_one_I : Submodule.span ‚Ñù (M := K) {1, I} = ‚ä§ := by
  suffices ‚àÄ x : K, ‚àÉ a b : ‚Ñù, a ‚Ä¢ 1 + b ‚Ä¢ I = x by
    simpa [Submodule.eq_top_iff', Submodule.mem_span_pair]
  exact fun x ‚Ü¶ ‚ü®re x, im x, by simp [real_smul_eq_coe_mul]‚ü©

variable (K) in
lemma RCLike.rank_le_two : Module.rank ‚Ñù K ‚â§ 2 :=
  calc
    _ = Module.rank ‚Ñù ‚Ü•(Submodule.span ‚Ñù ({1, I} : Set K)) := by rw [span_one_I]; simp
    _ ‚â§ #({1, I} : Finset K) := by
      -- TODO: `simp` doesn't rewrite inside the type argument to `Module.rank`, but `rw` does.
      -- We should introduce `Submodule.rank` to fix this.
      have := rank_span_finset_le (R := ‚Ñù) (M := K) {1, I}
      rw [Finset.coe_pair] at this
      simpa [span_one_I] using this
    _ ‚â§ 2 := mod_cast Finset.card_le_two

variable (K) in
lemma RCLike.finrank_le_two : Module.finrank ‚Ñù K ‚â§ 2 :=
  Module.finrank_le_of_rank_le <| rank_le_two _

namespace FiniteDimensional

open RCLike

library_note "RCLike instance"/--
This instance generates a type-class problem with a metavariable `?m` that should satisfy
`RCLike ?m`. Since this can only be satisfied by `‚Ñù` or `‚ÑÇ`, this does not cause problems. -/

/-- An `RCLike` field is finite-dimensional over `‚Ñù`, since it is spanned by `{1, I}`. -/
instance rclike_to_real : FiniteDimensional ‚Ñù K := ‚ü®{1, I}, by simp [span_one_I]‚ü©

variable (K E)
variable [NormedAddCommGroup E] [NormedSpace K E]

/-- A finite dimensional vector space over an `RCLike` is a proper metric space.

This is not an instance because it would cause a search for `FiniteDimensional ?x E` before
`RCLike ?x`. -/
theorem proper_rclike [FiniteDimensional K E] : ProperSpace E := by
  letI : NormedSpace ‚Ñù E := RestrictScalars.normedSpace ‚Ñù K E
  letI : FiniteDimensional ‚Ñù E := FiniteDimensional.trans ‚Ñù K E
  infer_instance

variable {E}

instance RCLike.properSpace_submodule (S : Submodule K E) [FiniteDimensional K S] :
    ProperSpace S :=
  proper_rclike K S

end FiniteDimensional

namespace RCLike

@[simp, rclike_simps]
theorem reCLM_norm : ‚Äñ(reCLM : K ‚ÜíL[‚Ñù] ‚Ñù)‚Äñ = 1 := by
  apply le_antisymm (LinearMap.mkContinuous_norm_le _ zero_le_one _)
  convert ContinuousLinearMap.ratio_le_opNorm (reCLM : K ‚ÜíL[‚Ñù] ‚Ñù) (1 : K)
  simp

@[simp, rclike_simps]
theorem conjCLE_norm : ‚Äñ(@conjCLE K _ : K ‚ÜíL[‚Ñù] K)‚Äñ = 1 :=
  (@conjLIE K _).toLinearIsometry.norm_toContinuousLinearMap

@[simp, rclike_simps]
theorem ofRealCLM_norm : ‚Äñ(ofRealCLM : ‚Ñù ‚ÜíL[‚Ñù] K)‚Äñ = 1 :=
  -- Porting note: the following timed out
  -- LinearIsometry.norm_toContinuousLinearMap ofRealLI
  LinearIsometry.norm_toContinuousLinearMap _

end RCLike

namespace Polynomial

open ComplexConjugate in
lemma aeval_conj (p : ‚Ñù[X]) (z : K) : aeval (conj z) p = conj (aeval z p) :=
  aeval_algHom_apply (RCLike.conjAe (K := K)) z p

lemma aeval_ofReal (p : ‚Ñù[X]) (x : ‚Ñù) : aeval (RCLike.ofReal x : K) p = eval x p :=
  aeval_algHom_apply RCLike.ofRealAm x p

end Polynomial

-- END Mathlib.Analysis.RCLike.Lemmas --

-- BEGIN Mathlib.MeasureTheory.Constructions.BorelSpace.Complex --
/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Analysis.Complex.Basic
import Mathlib.MeasureTheory.Constructions.BorelSpace.Basic

/-! # Equip `‚ÑÇ` with the Borel sigma-algebra -/


noncomputable section

instance (priority := 900) RCLike.measurableSpace {ùïú : Type*} [RCLike ùïú] : MeasurableSpace ùïú :=
  borel ùïú

instance (priority := 900) RCLike.borelSpace {ùïú : Type*} [RCLike ùïú] : BorelSpace ùïú :=
  ‚ü®rfl‚ü©

instance Complex.measurableSpace : MeasurableSpace ‚ÑÇ :=
  borel ‚ÑÇ

instance Complex.borelSpace : BorelSpace ‚ÑÇ :=
  ‚ü®rfl‚ü©

-- END Mathlib.MeasureTheory.Constructions.BorelSpace.Complex --

import Mathlib.Analysis.RCLike.Lemmas
import Mathlib.MeasureTheory.Constructions.BorelSpace.Complex

/-!
# Measurability of the basic `RCLike` functions

-/


noncomputable section

open NNReal ENNReal

namespace RCLike

variable {ùïú : Type*} [RCLike ùïú]

@[measurability]
theorem measurable_re : Measurable (re : ùïú ‚Üí ‚Ñù) :=
  continuous_re.measurable

@[measurability]
theorem measurable_im : Measurable (im : ùïú ‚Üí ‚Ñù) :=
  continuous_im.measurable

end RCLike

section RCLikeComposition

variable {Œ± ùïú : Type*} [RCLike ùïú] {m : MeasurableSpace Œ±} {f : Œ± ‚Üí ùïú}
  {Œº : MeasureTheory.Measure Œ±}

@[measurability, fun_prop]
theorem Measurable.re (hf : Measurable f) : Measurable fun x => RCLike.re (f x) :=
  RCLike.measurable_re.comp hf

@[measurability, fun_prop]
theorem AEMeasurable.re (hf : AEMeasurable f Œº) : AEMeasurable (fun x => RCLike.re (f x)) Œº :=
  RCLike.measurable_re.comp_aemeasurable hf

@[measurability, fun_prop]
theorem Measurable.im (hf : Measurable f) : Measurable fun x => RCLike.im (f x) :=
  RCLike.measurable_im.comp hf

@[measurability, fun_prop]
theorem AEMeasurable.im (hf : AEMeasurable f Œº) : AEMeasurable (fun x => RCLike.im (f x)) Œº :=
  RCLike.measurable_im.comp_aemeasurable hf

end RCLikeComposition

section

variable {Œ± ùïú : Type*} [RCLike ùïú] [MeasurableSpace Œ±] {f : Œ± ‚Üí ùïú} {Œº : MeasureTheory.Measure Œ±}

@[measurability]
theorem RCLike.measurable_ofReal : Measurable ((‚Üë) : ‚Ñù ‚Üí ùïú) :=
  RCLike.continuous_ofReal.measurable

theorem measurable_of_re_im (hre : Measurable fun x => RCLike.re (f x))
    (him : Measurable fun x => RCLike.im (f x)) : Measurable f := by
  convert Measurable.add (M := ùïú) (RCLike.measurable_ofReal.comp hre)
      ((RCLike.measurable_ofReal.comp him).mul_const RCLike.I)
  exact (RCLike.re_add_im _).symm

theorem aemeasurable_of_re_im (hre : AEMeasurable (fun x => RCLike.re (f x)) Œº)
    (him : AEMeasurable (fun x => RCLike.im (f x)) Œº) : AEMeasurable f Œº := by

