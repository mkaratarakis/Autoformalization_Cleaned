import Mathlib.Analysis.Analytic.Basic
import Mathlib.Analysis.Analytic.CPolynomial

open HasFiniteFPowerSeriesAt
variable {ùïú E F G : Type*} [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E]
  [NormedAddCommGroup F] [NormedSpace ùïú F] [NormedAddCommGroup G] [NormedSpace ùïú G]
open scoped Classical Topology
open Set Filter Asymptotics NNReal ENNReal
variable {f g : E ‚Üí F} {p pf pg : FormalMultilinearSeries ùïú E F} {x : E} {r r' : ‚Ñù‚â•0‚àû} {n m : ‚Ñï}
variable (ùïú)
variable {ùïú}

example (hf : HasFiniteFPowerSeriesAt f pf x n)
    (hg : HasFiniteFPowerSeriesAt g pg x m) :
    HasFiniteFPowerSeriesAt (f + g) (pf + pg) x (max n m) := by
  -- Existence of a Common Radius
  obtain ‚ü®r‚ÇÅ, hr‚ÇÅ‚ü© := hf
  obtain ‚ü®r‚ÇÇ, hr‚ÇÇ‚ü© := hg
  let r := min r‚ÇÅ r‚ÇÇ

  -- Sum of Finite Formal Power Series
  have h_add : ‚àÄ {y}, y ‚àà EMetric.ball (0 : E) r ‚Üí HasSum (fun k : ‚Ñï => (pf + pg) k fun _ => y) (f (x + y) + g (x + y)),
  { intro y hy,
    have hpf := hr‚ÇÅ.hasSum (EMetric.ball_subset_ball (min_le_left _ _) hy),
    have hpg := hr‚ÇÇ.hasSum (EMetric.ball_subset_ball (min_le_right _ _) hy),
    simp only [add_apply, Pi.add_apply] at hpf hpg ‚ä¢,
    exact HasSum.add hpf hpg, },

  -- Conclusion
  refine ‚ü®r, by simp, fun y hy => _‚ü©,
  rw [‚Üê h_add hy],
  exact HasSum.add (hr‚ÇÅ.hasSum (EMetric.ball_subset_ball (min_le_left _ _) hy)) (hr‚ÇÇ.hasSum (EMetric.ball_subset_ball (min_le_right _ _) hy)),

/- ACTUAL PROOF OF HasFiniteFPowerSeriesAt.add -/

example (hf : HasFiniteFPowerSeriesAt f pf x n)
    (hg : HasFiniteFPowerSeriesAt g pg x m) :
    HasFiniteFPowerSeriesAt (f + g) (pf + pg) x (max n m) := by
  rcases (hf.eventually.and hg.eventually).exists with ‚ü®r, hr‚ü©
  exact ‚ü®r, hr.1.add hr.2‚ü©