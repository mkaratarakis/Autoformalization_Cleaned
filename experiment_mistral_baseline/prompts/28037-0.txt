
1. **Informal Theorem**  
Equivalence of Option Elimination Principles: $\text{Option.elim'}(b, f, a) = a.\text{elim}(b, f)$ : For any types $\alpha$ and $\beta$, a default value $b \in \beta$, and a function $f : \alpha \to \beta$, the elimination principle `Option.elim'` applied to an `Option` value $a$ of type `Option α` is equal to the elimination principle `Option.elim` applied to the same `Option` value $a$, the default value $b$, and the function $f$. In other words, for any `Option` value $a$, the following holds:
\[ \text{Option.elim'}(b, f, a) = a.\text{elim}(b, f) \]

2. **Informal Proof**  
We will consider every possible case of the `Option` value $a$.

1. **Case 1: $a = \text{none}$**
- The goal is to show that $\text{Option.elim'}(b, f, \text{none}) = \text{none}.\text{elim}(b, f)$.
- By the definition of `Option.elim'` and `Option.elim`, both sides of the equation are equal to $b$.
- Therefore, the equality holds trivially due to the reflexive property.

2. **Case 2: $a = \text{some val}$**
- The goal is to show that $\text{Option.elim'}(b, f, \text{some val}) = (\text{some val}).\text{elim}(b, f)$.
- By the definition of `Option.elim'` and `Option.elim`, both sides of the equation are equal to $f(val)$.
- Therefore, the equality holds trivially due to the reflexive property.

Since both cases are covered and the equality holds in each case, the theorem is proved. $\blacksquare$

3. **Formal Theorem**  
example {α β : Type*} (b : β) (f : α → β) (a : Option α) :
    Option.elim' b f a = Option.elim a b f := by sorry

4. **Prefix**
import Mathlib.Tactic.Lemma
import Mathlib.Tactic.TypeStar
import Mathlib.Data.Option.Defs

open Option
variable {α : Type*} {β : Type*}

example {α β : Type*} (b : β) (f : α → β) (a : Option α) :
    Option.elim' b f a = Option.elim a b f := by
