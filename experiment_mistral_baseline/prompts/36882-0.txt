
1. **Informal Theorem**  
Next Element or Default is Independent of First Element if First Element is Not Equal to Given Element : For any list \( xs \) of elements of type \( \alpha \) and any elements \( x, y, d \in \alpha \), if \( x \neq y \), then the next element of \( x \) in the list \( y :: xs \) or the default value \( d \) is the same as the next element of \( x \) in the list \( xs \) or the default value \( d \). In other words, if \( x \neq y \), then \( \text{nextOr}(y :: xs, x, d) = \text{nextOr}(xs, x, d) \).

2. **Informal Proof**  
We will consider two cases for the list \( xs \):

1. **Case 1: \( xs \) is the empty list \( [] \).**
- We need to show that \([y].\text{nextOr}(x, d) = [].\text{nextOr}(x, d)\).
- This is trivially true because both sides are definitionally equal.

2. **Case 2: \( xs \) is a non-empty list of the form \( z :: zs \).**
- We need to show that \((y :: z :: zs).\text{nextOr}(x, d) = (z :: zs).\text{nextOr}(x, d)\).
- Since \( x \neq y \), the if-then-else function \(\text{ite}(x = y, \text{nextOr}(z :: zs, x, d), \text{nextOr}(z :: zs, x, d))\) returns \(\text{nextOr}(z :: zs, x, d)\) because the condition \( x = y \) is false.
- Therefore, the equality holds.

Thus, in both cases, the theorem is proved. This completes the proof.

3. **Formal Theorem**  
example (xs : List α) (y x d : α) (h : x ≠ y) :
    nextOr (y :: xs) x d = nextOr xs x d := by sorry

4. **Prefix**
import Mathlib.Data.Fintype.List
import Mathlib.Data.List.Cycle

open List
variable {α : Type*} [DecidableEq α]

example (xs : List α) (y x d : α) (h : x ≠ y) :
    nextOr (y :: xs) x d = nextOr xs x d := by
