Below are the error message and proof state for the proof you generated. Please revise the proof accordingly starting with new prefix. DO NOT include backticks, explanations, comments, code fences or any other text before or after the proof.
6. **Error Message and Proof State**
tmp.lean:19:0: error: unexpected end of input; expected ':='

4. **New Prefix**  
   The initial Lean 4 code that you must build on.
import Mathlib.Analysis.Calculus.Deriv.ZPow
import Mathlib.Analysis.Calculus.LogDeriv


open Filter Function
open scoped Topology BigOperators Classical
variable {𝕜 𝕜': Type*} [NontriviallyNormedField 𝕜] [NontriviallyNormedField 𝕜']
  [NormedAlgebra 𝕜 𝕜']

example (x : 𝕜) (n : ℤ) : logDeriv (· ^ n) x = n / x :=
  if h : x = 0 then by simp [h]
  else
    if hn : n = 0 then by simp [hn]
    else
      calc
        logDeriv (· ^ n) x = deriv (· ^ n) x / (x ^ n) := logDeriv_apply _ _
        _ = ((n : 𝕜) * x ^ (n - 1)) / (x ^ n) := by rw [deriv_zpow]
