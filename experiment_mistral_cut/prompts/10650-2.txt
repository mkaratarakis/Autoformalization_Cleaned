Below are the error message and proof state for the proof you generated. Please revise the proof accordingly starting with new prefix. DO NOT include backticks, explanations, comments, code fences or any other text before or after the proof.
6. **Error Message and Proof State**
tmp.lean:14:4: error: unsolved goals
case pos
p : ℕ
inst✝¹ : Fact (Nat.Prime p)
a : ℤ
inst✝ : Fact (Nat.Prime 2)
ha : a ≡ 0 [ZMOD 2]
⊢ ↑(legendreSym 2 a) = ↑a
tmp.lean:19:8: error: no goals to be solved
tmp.lean:15:4: error: unsolved goals
case neg
p : ℕ
inst✝¹ : Fact (Nat.Prime p)
a : ℤ
inst✝ : Fact (Nat.Prime 2)
ha : ¬a ≡ 0 [ZMOD 2]
ha' : a ≠ 0
⊢ ↑(quadraticCharFun (ZMod 2) ↑a) = ↑a
tmp.lean:24:27: error: tactic 'rewrite' failed, did not find instance of the pattern in the target expression
  ↑?m.3380 = ↑?m.3381
p✝ : ℕ
inst✝¹ : Fact (Nat.Prime p✝)
p : ℕ
inst✝ : Fact (Nat.Prime p)
a : ℤ
hp2 : ¬p = 2
h : p = 2
⊢ p = 2
tmp.lean:27:6: error: simp made no progress
tmp.lean:32:8: error: no goals to be solved
tmp.lean:33:64: error: application type mismatch
  quadraticChar_eq_pow_of_char_ne_two hodd ha'
argument
  ha'
has type
  a ≠ 0 : Prop
but is expected to have type
  ↑a ≠ 0 : Prop
tmp.lean:12:2: error: unsolved goals
case pos
p : ℕ
inst✝¹ : Fact (Nat.Prime p)
a : ℤ
inst✝ : Fact (Nat.Prime 2)
ha : a ≡ 0 [ZMOD 2]
⊢ ↑(legendreSym 2 a) = ↑a ^ (2 / 2)

case neg
p : ℕ
inst✝¹ : Fact (Nat.Prime p)
a : ℤ
inst✝ : Fact (Nat.Prime 2)
ha : ¬a ≡ 0 [ZMOD 2]
⊢ ↑(legendreSym 2 a) = ↑a ^ (2 / 2)
tmp.lean:10:73: error: unsolved goals
case neg
p✝ : ℕ
inst✝¹ : Fact (Nat.Prime p✝)
p : ℕ
inst✝ : Fact (Nat.Prime p)
a : ℤ
hp2 : ¬p = 2
⊢ ↑(legendreSym p a) = ↑a ^ (p / 2)
case pos
p : ℕ
inst✝¹ : Fact (Nat.Prime p)
a : ℤ
inst✝ : Fact (Nat.Prime 2)
ha : a ≡ 0 [ZMOD 2]
⊢ ↑(legendreSym 2 a) = ↑a ^ (2 / 2)

case neg
p : ℕ
inst✝¹ : Fact (Nat.Prime p)
a : ℤ
inst✝ : Fact (Nat.Prime 2)
ha : ¬a ≡ 0 [ZMOD 2]
⊢ ↑(legendreSym 2 a) = ↑a ^ (2 / 2)

4. **New Prefix**  
   The initial Lean 4 code that you must build on.
import Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.Basic
import Mathlib.NumberTheory.LegendreSymbol.Basic

open legendreSym
open Nat
variable (p : ℕ) [Fact p.Prime]
open ZMod
variable (p : ℕ) [Fact p.Prime]

example (a : ℤ) : (legendreSym p a : ZMod p) = (a : ZMod p) ^ (p / 2) := by
  by_cases hp2 : p = 2
  · subst hp2
    by_cases ha : a ≡ 0 [ZMOD 2]
