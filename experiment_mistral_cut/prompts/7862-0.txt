
1. **Informal Theorem**  
Right Multiplication Preserves Distance in Natural Numbers : For any natural numbers \( n, k, \) and \( m \), the distance between \( n \cdot k \) and \( m \cdot k \) is equal to the distance between \( n \) and \( m \) multiplied by \( k \), i.e., \(\text{dist}(n \cdot k, m \cdot k) = \text{dist}(n, m) \cdot k\).

2. **Informal Proof**  
To prove the theorem, we start by using the definition of the distance function on natural numbers. The distance function \(\text{dist}(n, m)\) is defined as:
\[
\text{dist}(n, m) = n - m + (m - n)
\]
Applying this definition to both \(\text{dist}(n \cdot k, m \cdot k)\) and \(\text{dist}(n, m)\), we have:
\[
\text{dist}(n \cdot k, m \cdot k) = (n \cdot k - m \cdot k) + (m \cdot k - n \cdot k)
\]
and
\[
\text{dist}(n, m) = n - m + (m - n)
\]
Thus, the goal is to show:
\[
(n \cdot k - m \cdot k) + (m \cdot k - n \cdot k) = (n - m + (m - n)) \cdot k
\]
Next, we use the right distributive property of multiplication over addition, which states:
\[
(a + b) \cdot c = a \cdot c + b \cdot c
\]
Applying this property, we get:
\[
(n - m + (m - n)) \cdot k = (n - m) \cdot k + (m - n) \cdot k
\]
Finally, we use the distributive property of multiplication over subtraction, which states:
\[
(a - b) \cdot c = a \cdot c - b \cdot c
\]
Applying this property to both terms, we get:
\[
(n - m) \cdot k = n \cdot k - m \cdot k
\]
and
\[
(m - n) \cdot k = m \cdot k - n \cdot k
\]
Thus, we have:
\[
(n - m) \cdot k + (m - n) \cdot k = (n \cdot k - m \cdot k) + (m \cdot k - n \cdot k)
\]
This shows that:
\[
\text{dist}(n \cdot k, m \cdot k) = \text{dist}(n, m) \cdot k
\]
Therefore, the theorem is proved. \(\blacksquare\)

3. **Formal Theorem**  
example (n k m : ℕ) : dist (n * k) (m * k) = dist n m * k := by sorry

4. **Prefix**
import Mathlib.Algebra.Order.Ring.Nat
import Mathlib.Data.Nat.Dist

open Nat


example (n k m : ℕ) : dist (n * k) (m * k) = dist n m * k := by

5. **Header Information**  
-- BEGIN Mathlib.Algebra.Order.Ring.Nat --
/-
Copyright (c) 2014 Floris van Doorn (c) 2016 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Leonardo de Moura, Jeremy Avigad, Mario Carneiro
-/
import Mathlib.Algebra.Order.Group.Nat
import Mathlib.Algebra.Order.GroupWithZero.Canonical
import Mathlib.Algebra.Order.Ring.Defs
import Mathlib.Algebra.Ring.Parity
import Mathlib.Data.Set.Basic

/-!
# The natural numbers form an ordered semiring

This file contains the commutative linear orderded semiring instance on the natural numbers.

See note [foundational algebra order theory].
-/

namespace Nat

/-! ### Instances -/

instance instIsStrictOrderedRing : IsStrictOrderedRing ℕ where
  add_le_add_left := @Nat.add_le_add_left
  le_of_add_le_add_left := @Nat.le_of_add_le_add_left
  zero_le_one := Nat.le_of_lt (Nat.zero_lt_succ 0)
  mul_lt_mul_of_pos_left := @Nat.mul_lt_mul_of_pos_left
  mul_lt_mul_of_pos_right := @Nat.mul_lt_mul_of_pos_right
  exists_pair_ne := ⟨0, 1, ne_of_lt Nat.zero_lt_one⟩

instance instLinearOrderedCommMonoidWithZero : LinearOrderedCommMonoidWithZero ℕ where
  zero_le_one := zero_le_one
  mul_le_mul_left _ _ h c := Nat.mul_le_mul_left c h

/-! ### Miscellaneous lemmas -/

lemma isCompl_even_odd : IsCompl { n : ℕ | Even n } { n | Odd n } := by
  simp only [← Set.compl_setOf, isCompl_compl, ← not_even_iff_odd]

end Nat

-- END Mathlib.Algebra.Order.Ring.Nat --

import Mathlib.Algebra.Order.Group.Nat
import Mathlib.Algebra.Order.Ring.Canonical

/-!
#  Distance function on ℕ

This file defines a simple distance function on naturals from truncated subtraction.
-/


namespace Nat

/-- Distance (absolute value of difference) between natural numbers. -/
def dist (n m : ℕ) :=
  n - m + (m - n)

theorem dist_comm (n m : ℕ) : dist n m = dist m n := by

@[simp]
theorem dist_self (n : ℕ) : dist n n = 0 := by

theorem eq_of_dist_eq_zero {n m : ℕ} (h : dist n m = 0) : n = m :=
  have : n - m = 0 := Nat.eq_zero_of_add_eq_zero_right h
  have : n ≤ m := tsub_eq_zero_iff_le.mp this
  have : m - n = 0 := Nat.eq_zero_of_add_eq_zero_left h
  have : m ≤ n := tsub_eq_zero_iff_le.mp this
  le_antisymm ‹n ≤ m› ‹m ≤ n›

theorem dist_eq_zero {n m : ℕ} (h : n = m) : dist n m = 0 := by

theorem dist_eq_sub_of_le {n m : ℕ} (h : n ≤ m) : dist n m = m - n := by
  rw [dist, tsub_eq_zero_iff_le.mpr h, zero_add]

theorem dist_eq_sub_of_le_right {n m : ℕ} (h : m ≤ n) : dist n m = n - m := by
  rw [dist_comm]; apply dist_eq_sub_of_le h

theorem dist_tri_left (n m : ℕ) : m ≤ dist n m + n :=
  le_trans le_tsub_add (add_le_add_right (Nat.le_add_left _ _) _)

theorem dist_tri_right (n m : ℕ) : m ≤ n + dist n m := by

theorem dist_tri_left' (n m : ℕ) : n ≤ dist n m + m := by

theorem dist_tri_right' (n m : ℕ) : n ≤ m + dist n m := by

theorem dist_zero_right (n : ℕ) : dist n 0 = n :=
  Eq.trans (dist_eq_sub_of_le_right (zero_le n)) (tsub_zero n)

theorem dist_zero_left (n : ℕ) : dist 0 n = n :=
  Eq.trans (dist_eq_sub_of_le (zero_le n)) (tsub_zero n)

theorem dist_add_add_right (n k m : ℕ) : dist (n + k) (m + k) = dist n m :=
  calc
    dist (n + k) (m + k) = n + k - (m + k) + (m + k - (n + k)) := rfl
    _ = n - m + (m + k - (n + k)) := by
    _ = n - m + (m - n) := by

theorem dist_add_add_left (k n m : ℕ) : dist (k + n) (k + m) = dist n m := by
  rw [add_comm k n, add_comm k m]; apply dist_add_add_right

theorem dist_eq_intro {n m k l : ℕ} (h : n + m = k + l) : dist n k = dist l m :=
  calc
    dist n k = dist (n + m) (k + m) := by
    _ = dist (k + l) (k + m) := by
    _ = dist l m := by

theorem dist.triangle_inequality (n m k : ℕ) : dist n k ≤ dist n m + dist m k := by
  have : dist n m + dist m k = n - m + (m - k) + (k - m + (m - n)) := by
    simp [dist, add_comm, add_left_comm, add_assoc]
  rw [this, dist]
  exact add_le_add tsub_le_tsub_add_tsub tsub_le_tsub_add_tsub

theorem dist_mul_right (n k m : ℕ) : dist (n * k) (m * k) = dist n m * k := by

