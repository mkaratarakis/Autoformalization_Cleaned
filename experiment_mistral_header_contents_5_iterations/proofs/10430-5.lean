import Mathlib.Analysis.Calculus.Deriv.ZPow
import Mathlib.Analysis.Calculus.LogDeriv


open Filter Function
open scoped Topology BigOperators Classical
variable {­ЮЋю ­ЮЋю': Type*} [NontriviallyNormedField ­ЮЋю] [NontriviallyNormedField ­ЮЋю']
  [NormedAlgebra ­ЮЋю ­ЮЋю']

example (x : ­ЮЋю) (n : Рёц) : logDeriv (┬и ^ n) x = n / x := by
  by_cases hx : x = 0
  ┬и simp [hx]
  ┬и have hРѓЂ : Рѕђрхљ y Рѕѓ (╬╗ y, y ^ n), x = (fun y => (n : ­ЮЋю) * y ^ (n - 1 : Рёц)) x := by
      exact deriv_zpow n x
    simp
    rw [hРѓЂ.logDeriv_apply]
    simp
    have hРѓѓ : x ^ n = x * x ^ (n - 1) := by
      rw [zpow_addРѓђ hx]
      simp
    rw [hРѓѓ]
    simp
    ring_nf
    exact  hx

/- ACTUAL PROOF OF logDeriv_zpow -/

example (x : ­ЮЋю) (n : Рёц) : logDeriv (┬и ^ n) x = n / x := by
  rw [logDeriv_fun_zpow (by fun_prop), logDeriv_id', mul_one_div]