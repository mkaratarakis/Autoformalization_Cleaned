
1. **Informal Theorem**  
Minimum is Less Than or Equal to Right Argument in Natural Numbers : For any natural numbers \(a\) and \(b\), the minimum of \(a\) and \(b\) is less than or equal to \(b\), i.e., \(\min(a, b) \leq b\).

2. **Informal Proof**  
To prove that \(\min(a, b) \leq b\) for any natural numbers \(a\) and \(b\), we consider two cases based on the relationship between \(a\) and \(b\):

1. **Case 1: \(a \leq b\)**

By the definition of the minimum function, \(\min(a, b) = a\) if \(a \leq b\). Since we are assuming \(a \leq b\), it follows that \(\min(a, b) = a \leq b\). Therefore, \(\min(a, b) \leq b\) holds in this case.

2. **Case 2: \(a \not\leq b\)**

By the definition of the minimum function, \(\min(a, b) = b\) if \(a \not\leq b\). Since we are assuming \(a \not\leq b\), it follows that \(\min(a, b) = b\). Clearly, \(b \leq b\) is always true. Therefore, \(\min(a, b) \leq b\) holds in this case as well.

Since both cases cover all possible relationships between \(a\) and \(b\), we conclude that \(\min(a, b) \leq b\) for any natural numbers \(a\) and \(b\). This completes the proof. \(\blacksquare\)

3. **Formal Theorem**  
example (a b : Nat) : min a b ≤ b := by sorry

4. **Prefix**
import Init.ByCases
import Init.Data.Nat.MinMax

open Nat


example (a b : Nat) : min a b ≤ b := by

5. **Header Information**  
-- BEGIN Init.ByCases --
/-
Copyright (c) 2024 Lean FRO, LLC. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Leonardo de Moura, Mario Carneiro
-/
module

prelude
import Init.Classical

/-! # by_cases tactic and if-then-else support -/

/--
`by_cases (h :)? p` splits the main goal into two cases, assuming `h : p` in the first branch, and `h : ¬ p` in the second branch.
-/
syntax "by_cases " (atomic(ident " : "))? term : tactic

macro_rules
  | `(tactic| by_cases $e) => `(tactic| by_cases h : $e)
macro_rules
  | `(tactic| by_cases $h : $e) =>
    `(tactic| open Classical in refine if $h:ident : $e then ?pos else ?neg)

/-! ## if-then-else -/

@[simp] theorem if_true {_ : Decidable True} (t e : α) : ite True t e = t := if_pos trivial

@[simp] theorem if_false {_ : Decidable False} (t e : α) : ite False t e = e := if_neg id

theorem ite_id [Decidable c] {α} (t : α) : (if c then t else t) = t := by split <;> rfl

/-- A function applied to a `dite` is a `dite` of that function applied to each of the branches. -/
theorem apply_dite (f : α → β) (P : Prop) [Decidable P] (x : P → α) (y : ¬P → α) :
    f (dite P x y) = dite P (fun h => f (x h)) (fun h => f (y h)) := by
  by_cases h : P <;> simp [h]

/-- A function applied to a `ite` is a `ite` of that function applied to each of the branches. -/
theorem apply_ite (f : α → β) (P : Prop) [Decidable P] (x y : α) :
    f (ite P x y) = ite P (f x) (f y) :=
  apply_dite f P (fun _ => x) (fun _ => y)

/-- A `dite` whose results do not actually depend on the condition may be reduced to an `ite`. -/
@[simp] theorem dite_eq_ite [Decidable P] :
  (dite P (fun _ => a) (fun _ => b)) = ite P a b := rfl

@[deprecated "Use `ite_eq_right_iff`" (since := "2024-09-18")]
theorem ite_some_none_eq_none [Decidable P] :
    (if P then some x else none) = none ↔ ¬ P := by
  simp only [ite_eq_right_iff, reduceCtorEq]
  rfl

@[deprecated "Use `Option.ite_none_right_eq_some`" (since := "2024-09-18")]
theorem ite_some_none_eq_some [Decidable P] :
    (if P then some x else none) = some y ↔ P ∧ x = y := by
  split <;> simp_all

@[deprecated "Use `dite_eq_right_iff" (since := "2024-09-18")]
theorem dite_some_none_eq_none [Decidable P] {x : P → α} :
    (if h : P then some (x h) else none) = none ↔ ¬P := by
  simp

@[deprecated "Use `Option.dite_none_right_eq_some`" (since := "2024-09-18")]
theorem dite_some_none_eq_some [Decidable P] {x : P → α} {y : α} :
    (if h : P then some (x h) else none) = some y ↔ ∃ h : P, x h = y := by
  by_cases h : P <;> simp [h]

-- END Init.ByCases --

import Init.ByCases

namespace Nat

/-! # min lemmas -/

protected theorem min_eq_min (a : Nat) : Nat.min a b = min a b := rfl

@[simp] protected theorem zero_min (a : Nat) : min 0 a = 0 := by
  simp [Nat.min_def]

@[simp] protected theorem min_zero (a : Nat) : min a 0 = 0 := by
  simp [Nat.min_def]

@[simp] protected theorem add_min_add_right (a b c : Nat) : min (a + c) (b + c) = min a b + c := by
  rw [Nat.min_def, Nat.min_def]
  simp only [Nat.add_le_add_iff_right]
  split <;> simp

@[simp] protected theorem add_min_add_left (a b c : Nat) : min (a + b) (a + c) = a + min b c := by
  rw [Nat.min_def, Nat.min_def]
  simp only [Nat.add_le_add_iff_left]
  split <;> simp

@[simp] protected theorem mul_min_mul_right (a b c : Nat) : min (a * c) (b * c) = min a b * c := by
  by_cases h : 0 < c
  · rw [Nat.min_def, Nat.min_def]
    simp only [Nat.mul_le_mul_right_iff h]
    split <;> simp
  · replace h : c = 0 := by
    subst h
    simp

@[simp] protected theorem mul_min_mul_left (a b c : Nat) : min (a * b) (a * c) = a * min b c := by
  rw [Nat.mul_comm a, Nat.mul_comm a, Nat.mul_min_mul_right, Nat.mul_comm]

protected theorem min_comm (a b : Nat) : min a b = min b a := by
  match Nat.lt_trichotomy a b with
  | .inl h => simp [Nat.min_def, h, Nat.le_of_lt, Nat.not_le_of_lt]
  | .inr (.inl h) => simp [Nat.min_def, h]
  | .inr (.inr h) => simp [Nat.min_def, h, Nat.le_of_lt, Nat.not_le_of_lt]
instance : Std.Commutative (α := Nat) min := ⟨Nat.min_comm⟩

protected theorem min_le_right (a b : Nat) : min a b ≤ b := by

