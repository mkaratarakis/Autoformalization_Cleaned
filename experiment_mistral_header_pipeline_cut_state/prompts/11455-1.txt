Below are the error message and proof state for the proof you generated. Please revise the proof accordingly starting with new prefix. DO NOT include backticks, explanations, comments, code fences or any other text before or after the proof.
6. **Error Message and Proof State**
tmp.lean:13:29: error: numerals are data in Lean, but the expected type is a proposition
  ?m.126 ∣ ?m.127 : Prop
tmp.lean:14:33: error: application type mismatch
  dvd_gcd k
argument
  k
has type
  Nat : Type
but is expected to have type
  ?m.290 ∣ ?m.291 : Prop
tmp.lean:14:36: error: type mismatch
  m * n
has type
  Nat : outParam Type
but is expected to have type
  ?m.290 ∣ ?m.292 : Prop
tmp.lean:9:61: error: unsolved goals
k m n : Nat
m' : Nat := k.gcd m
n' : Nat := k.gcd n
g : Nat := k.gcd (m * n)
⊢ k.gcd (m * n) ∣ k.gcd m * k.gcd n
k m n : Nat
m' : Nat := k.gcd m
n' : Nat := k.gcd n
g : Nat := k.gcd (m * n)
⊢ k.gcd (m * n) ∣ k.gcd m * k.gcd n

4. **New Prefix**  
   The initial Lean 4 code that you must build on.
import Init.Data.Nat.Dvd
import Init.NotationExtra
import Init.RCases
import Init.Data.Nat.Gcd

open Nat


example (k m n : Nat) : gcd k (m * n) ∣ gcd k m * gcd k n := by
  let m' := gcd k m
  let n' := gcd k n
  let g := gcd k (m * n)
