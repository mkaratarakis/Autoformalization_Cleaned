
1. **Informal Theorem**  
Array Extensionality: $as.data = bs.data \to as = bs$ : For any type $\alpha$ and any two arrays $as$ and $bs$ of type `Array $\alpha$`, if the underlying lists of elements in $as$ and $bs$ are equal, i.e., $as.data = bs.data$, then the arrays $as$ and $bs$ are equal, i.e., $as = bs$.

2. **Informal Proof**  
To prove that $as = bs$ given that $as.data = bs.data$, we start by considering the cases for the arrays $as$ and $bs$. Since both $as$ and $bs$ are constructed using the `Array.mk` function, we can write $as = \text{Array.mk}(as.data)$ and $bs = \text{Array.mk}(bs.data)$.

Given the hypothesis that $as.data = bs.data$, we can simplify this hypothesis to reflect the equality of the underlying lists. By substituting $as.data$ with $bs.data$ in the goal, we reduce the goal to showing that $\text{Array.mk}(as.data) = \text{Array.mk}(bs.data)$. Since $as.data = bs.data$, this equality is trivially true by the properties of equality. Therefore, we conclude that $as = bs$. This completes the proof. $\blacksquare$

3. **Formal Theorem**  
example {as bs : Array α} (h : as.data = bs.data) : as = bs := by sorry

4. **Prefix**
import Init.WFTactics
import Init.Data.Nat.Basic
import Init.Data.Fin.Basic
import Init.Data.UInt.Basic
import Init.Data.Repr
import Init.Data.ToString.Basic
import Init.GetElem
import Init.Data.Array.Basic

open Array
variable {α : Type u}

example {as bs : Array α} (h : as.data = bs.data) : as = bs := by

5. **Header Information**  
-- Init.WFTactics not found. --

-- Init.Data.Nat.Basic not found. --

-- Init.Data.Fin.Basic not found. --

-- Init.Data.UInt.Basic not found. --

-- Init.Data.Repr not found. --

-- Init.Data.ToString.Basic not found. --

-- Init.GetElem not found. --

-- Init.Data.Array.Basic not found. --

