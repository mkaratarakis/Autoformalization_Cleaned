
1. **Informal Theorem**  
Multiplication Preserves Strict Inequality on the Left in Natural Numbers : For any natural numbers \(a\), \(b\), and \(c\) such that \(a > 0\), the inequality \(a \cdot b < a \cdot c\) holds if and only if \(b < c\).

2. **Informal Proof**  
We will prove the theorem by induction on \(a\).

**Base Case:**
For \(a = 0\), the assumption \(0 < 0\) is false. Therefore, the implication \(0 \cdot b < 0 \cdot c \leftrightarrow b < c\) is trivially true.

**Inductive Step:**
Assume \(a = n + 1\) and that the inductive hypothesis \(0 < n \rightarrow (n \cdot b < n \cdot c \leftrightarrow b < c)\) holds. We need to show that \((n + 1) \cdot b < (n + 1) \cdot c \leftrightarrow b < c\).

First, we use the definitions of successor and the right distributive property to simplify the goal:
\[
(n + 1) \cdot b = n \cdot b + b \quad \text{and} \quad (n + 1) \cdot c = n \cdot c + c
\]
Thus, the goal becomes:
\[
n \cdot b + b + b < n \cdot c + c + c \leftrightarrow b < c
\]

We use the inductive hypothesis \(n \cdot b < n \cdot c \leftrightarrow b < c\) and the fact that adding the same positive number to both sides of an inequality preserves the inequality. Therefore, the goal is trivially true by the properties of natural numbers and the inductive hypothesis.

By induction, the theorem holds for all natural numbers \(a > 0\). This completes the proof. \(\blacksquare\)

3. **Formal Theorem**  
example (a0 : 0 < a) : a * b < a * c ↔ b < c := by sorry

4. **Prefix**
import Init.Omega
import Init.Data.Nat.Mod

open Nat


example (a0 : 0 < a) : a * b < a * c ↔ b < c := by

5. **Header Information**  
-- BEGIN Init.Omega --
/-
Copyright (c) 2023 Lean FRO, LLC. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
module

prelude
import Init.Omega.Int
import Init.Omega.IntList
import Init.Omega.LinearCombo
import Init.Omega.Constraint
import Init.Omega.Logic

-- END Init.Omega --

import Init.Omega

/-!
# Further results about `mod`.

This file proves some results about `mod` that are useful for bitblasting,
in particular
`Nat.mod_mul : x % (a * b) = x % a + a * (x / a % b)`
and its corollary
`Nat.mod_pow_succ : x % b ^ (k + 1) = x % b ^ k + b ^ k * ((x / b ^ k) % b)`.

It contains the necessary preliminary results relating order and `*` and `/`,
which should probably be moved to their own file.
-/

namespace Nat

@[simp] protected theorem mul_lt_mul_left (a0 : 0 < a) : a * b < a * c ↔ b < c := by

