
1. **Informal Theorem**  
Erasing the Head Element from a List Results in the Tail : For any type \( \alpha \) and any list \( l \) of elements of type \( \alpha \), if \( a \) is an element of \( \alpha \), then erasing the first occurrence of \( a \) from the list \( a :: l \) results in the list \( l \). Formally, \((a :: l). \text{erase } a = l\).

2. **Informal Proof**  
We need to show that erasing the first occurrence of \(a\) from the list \(a :: l\) results in the list \(l\). Using the definition of erasing the first occurrence of an element from a list, we have:
\[
(b :: l). \text{erase } a =
\begin{cases}
l & \text{if } b = a \\
b :: (l. \text{erase } a) & \text{if } b \neq a
\end{cases}
\]
Since \(a\) is the head of the list \(a :: l\), the condition \(a = a\) is satisfied. Therefore, \((a :: l). \text{erase } a = l\). This completes the proof.

3. **Formal Theorem**  
example [LawfulBEq α] (a : α) (l : List α) : (a :: l).erase a = l := by sorry

4. **Prefix**
import Init.Data.List.Pairwise
import Init.Data.List.Erase

open List
open Nat
variable [BEq α]

example [LawfulBEq α] (a : α) (l : List α) : (a :: l).erase a = l := by

5. **Header Information**  
-- Init.Data.List.Pairwise not found. --

-- Init.Data.List.Erase not found. --

