
1. **Informal Theorem**  
Recursive Left Shift of Bitvectors with Zero Steps : For any natural numbers \( w_1 \) and \( w_2 \), and for any bitvectors \( x \) and \( y \) of widths \( w_1 \) and \( w_2 \) respectively, the recursive left shift operation `shiftLeftRec` applied to \( x \) and \( y \) with \( n = 0 \) is equal to the left shift of \( x \) by the value of the least significant bit of \( y \). Formally, this is expressed as:
\[ x.\text{shiftLeftRec}(y, 0) = x <<< (y \&&& \text{twoPow}(w_2, 0)) \]

2. **Informal Proof**  
To prove the theorem, we start by using the definition of the `shiftLeftRec` function. The recursive left shift operation `shiftLeftRec` applied to \( x \) and \( y \) with \( n = 0 \) is defined such that it simplifies to the left shift of \( x \) by the value of the least significant bit of \( y \). Specifically, the least significant bit of \( y \) is given by \( y \&&& \text{twoPow}(w_2, 0) \).

Thus, we need to show that:
\[ x.\text{shiftLeftRec}(y, 0) = x <<< (y \&&& \text{twoPow}(w_2, 0)) \]

By the definition of `shiftLeftRec`, the left-hand side simplifies directly to the right-hand side. Therefore, the equality holds, and the theorem is proved.

\(\blacksquare\)

3. **Formal Theorem**  
example {x : BitVec w₁} {y : BitVec w₂} :
    shiftLeftRec x y 0 = x <<< (y &&& twoPow w₂ 0) := by sorry

4. **Prefix**
import Init.Data.BitVec.Folds
import Init.Data.Nat.Mod
import Init.Data.BitVec.Bitblast

open BitVec
open Nat Bool

example {x : BitVec w₁} {y : BitVec w₂} :
    shiftLeftRec x y 0 = x <<< (y &&& twoPow w₂ 0) := by

5. **Header Information**  
-- Init.Data.BitVec.Folds not found. --

-- Init.Data.Nat.Mod not found. --

-- Init.Data.BitVec.Bitblast not found. --

