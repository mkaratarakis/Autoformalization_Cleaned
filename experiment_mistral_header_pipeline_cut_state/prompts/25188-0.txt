
1. **Informal Theorem**  
Option Bind Equals None if and only if Function Maps Members to None : For any types \( \alpha \) and \( \beta \), and for any optional value \( o : \text{Option} \, \alpha \) and function \( f : \alpha \to \text{Option} \, \beta \), the expression \( o \bind f \) is equal to `none` if and only if for every \( b : \beta \) and \( a : \alpha \), if \( a \in o \), then \( b \notin f(a) \).

2. **Informal Proof**  
We start by simplifying the proposition using the following theorems and definitions:
1. The equivalence that \( o \bind f = \text{none} \) if and only if for all \( b : \beta \) and \( a : \alpha \), if \( a \in o \), then \( b \notin f(a) \).
2. The equivalence that the non-existence of an element \( x \) in \( \alpha \) that satisfies \( p(x) \) is equivalent to the statement that for all elements \( x \) in \( \alpha \), \( p(x) \) does not hold.
3. The equivalence that the negation of the conjunction of two propositions \( a \) and \( b \) is equivalent to \( a \) implying the negation of \( b \).
4. The definition of membership in an `Option` type.
5. The definition of the `Option.bind` function.

Using these, we can rewrite the original statement as:
\[ o \bind f = \text{none} \leftrightarrow \forall (b : \beta) (a : \alpha), a \in o \to b \notin f(a) \]

This equivalence is trivially true by the definitions and theorems used. Therefore, the theorem is proved.

3. **Formal Theorem**  
example {o : Option α} {f : α → Option β} :
    o.bind f = none ↔ ∀ b a, a ∈ o → b ∉ f a := by sorry

4. **Prefix**
import Init.Data.Option.BasicAux
import Init.Data.Option.Instances
import Init.Classical
import Init.Ext
import Init.Data.Option.Lemmas

open Option


example {o : Option α} {f : α → Option β} :
    o.bind f = none ↔ ∀ b a, a ∈ o → b ∉ f a := by

5. **Header Information**  
-- Init.Data.Option.BasicAux not found. --

-- Init.Data.Option.Instances not found. --

-- Init.Classical not found. --

-- Init.Ext not found. --

-- Init.Data.Option.Lemmas not found. --

