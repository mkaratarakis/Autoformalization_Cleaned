
1. **Informal Theorem**  
Lift or Get with None on the Right: \( a \, \text{liftOrGet} \, \text{none} = a \) : For any type \( \alpha \) and a binary function \( f : \alpha \to \alpha \to \alpha \), and for any optional value \( a : \text{Option} \, \alpha \), the result of applying the `liftOrGet` function to \( a \) and `none` is \( a \). In other words, if one of the inputs to `liftOrGet` is `none`, the function returns the other input.

2. **Informal Proof**  
We need to show that for any optional value \( a \), the equation \( \text{liftOrGet} \, f \, a \, \text{none} = a \) holds. We will consider every possible case for \( a \).

1. **Case 1: \( a = \text{none} \)**
- The goal is to show that \( \text{liftOrGet} \, f \, \text{none} \, \text{none} = \text{none} \).
- This is trivially true because both sides of the equation are definitionally equal.

2. **Case 2: \( a = \text{some} \, x \) for some \( x \in \alpha \)**
- The goal is to show that \( \text{liftOrGet} \, f \, (\text{some} \, x) \, \text{none} = \text{some} \, x \).
- This is also trivially true because both sides of the equation are definitionally equal.

Since both cases are trivially true, the theorem is proved. Therefore, for any optional value \( a \), the result of applying the `liftOrGet` function to \( a \) and `none` is \( a \). This completes the proof.

3. **Formal Theorem**  
example {f} {a : Option α} : liftOrGet f a none = a := by sorry

4. **Prefix**
import Init.Data.Option.BasicAux
import Init.Data.Option.Instances
import Init.Classical
import Init.Ext
import Init.Data.Option.Lemmas

open Option


example {f} {a : Option α} : liftOrGet f a none = a := by

5. **Header Information**  
-- Init.Data.Option.BasicAux not found. --

-- Init.Data.Option.Instances not found. --

-- Init.Classical not found. --

-- Init.Ext not found. --

-- Init.Data.Option.Lemmas not found. --

