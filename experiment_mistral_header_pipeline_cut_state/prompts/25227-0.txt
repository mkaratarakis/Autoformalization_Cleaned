
1. **Informal Theorem**  
Lift or Get with None on the Left : For any type \( \alpha \) and a binary function \( f : \alpha \to \alpha \to \alpha \), and for any optional value \( b : \text{Option} \, \alpha \), the result of applying the `liftOrGet` function to `none` and \( b \) is \( b \). In other words, if one of the inputs to `liftOrGet` is `none`, the function returns the other input.

2. **Informal Proof**  
We need to show that for any \( b : \text{Option} \, \alpha \), \( \text{liftOrGet} \, f \, \text{none} \, b = b \).

We will consider every possible case for \( b \):

1. **Case 1: \( b = \text{none} \)**

In this case, we need to show that \( \text{liftOrGet} \, f \, \text{none} \, \text{none} = \text{none} \).

The current goal is trivially true due to the reflexive property, since both sides are definitionally equal.

2. **Case 2: \( b = \text{some} \, v \) for some \( v \in \alpha \)**

In this case, we need to show that \( \text{liftOrGet} \, f \, \text{none} \, (\text{some} \, v) = \text{some} \, v \).

The current goal is trivially true due to the reflexive property, since both sides are definitionally equal.

Since both cases are trivially true, we conclude that for any \( b : \text{Option} \, \alpha \), \( \text{liftOrGet} \, f \, \text{none} \, b = b \). This completes the proof.

3. **Formal Theorem**  
example {f} {b : Option α} : liftOrGet f none b = b := by sorry

4. **Prefix**
import Init.Data.Option.BasicAux
import Init.Data.Option.Instances
import Init.Classical
import Init.Ext
import Init.Data.Option.Lemmas

open Option


example {f} {b : Option α} : liftOrGet f none b = b := by

5. **Header Information**  
-- Init.Data.Option.BasicAux not found. --

-- Init.Data.Option.Instances not found. --

-- Init.Classical not found. --

-- Init.Ext not found. --

-- Init.Data.Option.Lemmas not found. --

