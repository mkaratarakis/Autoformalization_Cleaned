
1. **Informal Theorem**  
Double Join is Equivalent to Map Join and Join: \( x.\text{join}.\text{join} = (\text{Option.map } \text{join } x).\text{join} \) : For any type \( \alpha \) and any `Option` of `Option` of `Option` values \( x \), the double application of the `join` function is equivalent to applying the `join` function to the result of mapping the `join` function over \( x \). Formally, for any \( x : \text{Option}(\text{Option}(\text{Option} \alpha)) \):
\[
x.\text{join}.\text{join} = (\text{Option.map } \text{join } x).\text{join}
\]

2. **Informal Proof**  
We will consider every possible case of \( x \).

1. **Case 1: \( x = \text{none} \)**
- We need to show that \(\text{none}.\text{join}.\text{join} = (\text{Option.map } \text{join } \text{none}).\text{join}\).
- Simplifying the left-hand side, \(\text{none}.\text{join} = \text{none}\), and \(\text{none}.\text{join} = \text{none}\).
- Simplifying the right-hand side, \(\text{Option.map } \text{join } \text{none} = \text{none}\), and \(\text{none}.\text{join} = \text{none}\).
- Therefore, \(\text{none}.\text{join}.\text{join} = \text{none}\) and \((\text{Option.map } \text{join } \text{none}).\text{join} = \text{none}\), so the equality holds.

2. **Case 2: \( x = \text{some } y \)**
- We need to show that \((\text{some } y).\text{join}.\text{join} = (\text{Option.map } \text{join } (\text{some } y)).\text{join}\).
- Simplifying the left-hand side, \((\text{some } y).\text{join} = y.\text{join}\), and \(y.\text{join}.\text{join} = y.\text{join}.\text{join}\).
- Simplifying the right-hand side, \(\text{Option.map } \text{join } (\text{some } y) = \text{some } (y.\text{join})\), and \((\text{some } (y.\text{join})).\text{join} = y.\text{join}.\text{join}\).
- Therefore, \((\text{some } y).\text{join}.\text{join} = y.\text{join}.\text{join}\) and \((\text{Option.map } \text{join } (\text{some } y)).\text{join} = y.\text{join}.\text{join}\), so the equality holds.

Since both cases are covered, the theorem is proven. \(\blacksquare\)

3. **Formal Theorem**  
example {x : Option (Option (Option α))} : x.join.join = (x.map join).join := by sorry

4. **Prefix**
import Init.Data.Option.BasicAux
import Init.Data.Option.Instances
import Init.Classical
import Init.Ext
import Init.Data.Option.Lemmas

open Option


example {x : Option (Option (Option α))} : x.join.join = (x.map join).join := by

5. **Header Information**  
-- Init.Data.Option.BasicAux not found. --

-- Init.Data.Option.Instances not found. --

-- Init.Classical not found. --

-- Init.Ext not found. --

-- Init.Data.Option.Lemmas not found. --

