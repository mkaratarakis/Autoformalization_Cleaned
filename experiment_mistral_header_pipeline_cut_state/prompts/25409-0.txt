
1. **Informal Theorem**  
Conditional Expression with Negated Condition Swaps Branches : For any boolean condition $b$ and any values $t, e$ of type $\alpha$, the expression `bif !b then t else e` is equal to `bif b then e else t`, i.e., $(\text{if } \neg b \text{ then } t \text{ else } e) = (\text{if } b \text{ then } e \text{ else } t)$.

2. **Informal Proof**  
We will consider every possible case of the boolean value $b$.

**Case 1: $b = \text{false}$**
- The expression $(\text{if } \neg \text{false} \text{ then } t \text{ else } e)$ simplifies to $(\text{if } \text{true} \text{ then } t \text{ else } e)$, which is $t$.
- The expression $(\text{if } \text{false} \text{ then } e \text{ else } t)$ simplifies to $t$.
- Therefore, $(\text{if } \neg \text{false} \text{ then } t \text{ else } e) = (\text{if } \text{false} \text{ then } e \text{ else } t)$ holds.

**Case 2: $b = \text{true}$**
- The expression $(\text{if } \neg \text{true} \text{ then } t \text{ else } e)$ simplifies to $(\text{if } \text{false} \text{ then } t \text{ else } e)$, which is $e$.
- The expression $(\text{if } \text{true} \text{ then } e \text{ else } t)$ simplifies to $e$.
- Therefore, $(\text{if } \neg \text{true} \text{ then } t \text{ else } e) = (\text{if } \text{true} \text{ then } e \text{ else } t)$ holds.

In both cases, the equality holds trivially due to the reflexive property of equality. This completes the proof.

3. **Formal Theorem**  
example (b : Bool) (t e : α) : cond (!b) t e = cond b e t := by sorry

4. **Prefix**
import Init.BinderPredicates
import Init.Data.Bool

open Bool


example (b : Bool) (t e : α) : cond (!b) t e = cond b e t := by

5. **Header Information**  
-- Init.BinderPredicates not found. --

-- Init.Data.Bool not found. --

