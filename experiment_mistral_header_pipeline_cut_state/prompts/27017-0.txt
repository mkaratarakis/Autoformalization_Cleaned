
1. **Informal Theorem**  
Left Mapping Preserves `zipWithAll` Operation in Lists : For any lists \( l_1 \) and \( l_2 \) of types \( \alpha \) and \( \beta \) respectively, and a function \( f : \alpha \to \alpha' \), and a function \( g : \text{Option} \, \alpha' \to \text{Option} \, \beta \to \gamma \), the following holds:
\[
\text{zipWithAll} \, g \, (\text{map} \, f \, l_1) \, l_2 = \text{zipWithAll} \, (\lambda a \, b, \, g \, (f \, a) \, b) \, l_1 \, l_2
\]
In other words, applying the function \( f \) to each element of \( l_1 \) and then zipping the result with \( l_2 \) using \( g \) is the same as zipping \( l_1 \) and \( l_2 \) using a modified version of \( g \) that applies \( f \) to the elements of \( l_1 \) before zipping.

2. **Informal Proof**  
We perform induction on the list \( l_1 \) while generalizing over \( l_2 \).

**Base Case:**
1. **\( l_1 \) is the empty list:**
- **Sub-case 1: \( l_2 \) is the empty list:**
\[
\text{zipWithAll} \, g \, (\text{map} \, f \, []) \, [] = \text{zipWithAll} \, (\lambda a \, b, \, g \, (f \, a) \, b) \, [] \, []
\]
Both sides are trivially equal to the empty list.
- **Sub-case 2: \( l_2 \) is a non-empty list \( [b_1, b_2, \ldots, b_n] \):**
\[
\text{zipWithAll} \, g \, (\text{map} \, f \, []) \, [b_1, b_2, \ldots, b_n] = \text{zipWithAll} \, (\lambda a \, b, \, g \, (f \, a) \, b) \, [] \, [b_1, b_2, \ldots, b_n]
\]
Both sides are trivially equal to the list of results of applying \( g \) to `None` and each element of \( l_2 \).

**Inductive Step:**
2. **\( l_1 \) is a non-empty list \( [a_1, a_2, \ldots, a_m] \):**
- **Sub-case 1: \( l_2 \) is the empty list:**
\[
\text{zipWithAll} \, g \, (\text{map} \, f \, [a_1, a_2, \ldots, a_m]) \, [] = \text{zipWithAll} \, (\lambda a \, b, \, g \, (f \, a) \, b) \, [a_1, a_2, \ldots, a_m] \, []
\]
Both sides are trivially equal to the empty list.
- **Sub-case 2: \( l_2 \) is a non-empty list \( [b_1, b_2, \ldots, b_n] \):**
\[
\text{zipWithAll} \, g \, (\text{map} \, f \, [a_1, a_2, \ldots, a_m]) \, [b_1, b_2, \ldots, b_n] = \text{zipWithAll} \, (\lambda a \, b, \, g \, (f \, a) \, b) \, [a_1, a_2, \ldots, a_m] \, [b_1, b_2, \ldots, b_n]
\]
By the inductive hypothesis, we know that:
\[
\text{zipWithAll} \, g \, (\text{map} \, f \, [a_2, \ldots, a_m]) \, [b_2, \ldots, b_n] = \text{zipWithAll} \, (\lambda a \, b, \, g \, (f \, a) \, b) \, [a_2, \ldots, a_m] \, [b_2, \ldots, b_n]
\]
Therefore, the left-hand side and the right-hand side are equal by the definition of `zipWithAll` and the inductive hypothesis.

In all cases, the equality holds, thus completing the proof.

3. **Formal Theorem**  
example (l₁ : List α) (l₂ : List β) (f : α → α') (g : Option α' → Option β → γ) :
    zipWithAll g (l₁.map f) l₂ = zipWithAll (fun a b => g (f <$> a) b) l₁ l₂ := by sorry

4. **Prefix**
import Init.Data.List.TakeDrop
import Init.Data.List.Zip

open List
open Nat

example (l₁ : List α) (l₂ : List β) (f : α → α') (g : Option α' → Option β → γ) :
    zipWithAll g (l₁.map f) l₂ = zipWithAll (fun a b => g (f <$> a) b) l₁ l₂ := by

5. **Header Information**  
-- Init.Data.List.TakeDrop not found. --

-- Init.Data.List.Zip not found. --

