
1. **Informal Theorem**  
Right Mapping Preserves `zipWithAll` Operation in Lists : For any lists \( l_1 \) and \( l_2 \) of types \( \alpha \) and \( \beta \) respectively, and a function \( f : \beta \to \beta' \), and a function \( g : \text{Option} \, \alpha \to \text{Option} \, \beta' \to \gamma \), the following holds:
\[
\text{zipWithAll} \, g \, l_1 \, (\text{map} \, f \, l_2) = \text{zipWithAll} \, (\lambda a \, b, \, g \, a \, (f \, b)) \, l_1 \, l_2
\]
In other words, applying the function \( f \) to each element of \( l_2 \) and then zipping the result with \( l_1 \) using \( g \) is the same as zipping \( l_1 \) and \( l_2 \) using a modified version of \( g \) that applies \( f \) to the elements of \( l_2 \) before zipping.

2. **Informal Proof**  
We will prove the theorem by induction on the list \( l_1 \) and generalizing over \( l_2 \).

**Base Case:**
1. **\( l_1 \) is empty:**
- **Subcase 1: \( l_2 \) is empty:**
\[
\text{zipWithAll} \, g \, [] \, (\text{map} \, f \, []) = \text{zipWithAll} \, (\lambda a \, b, \, g \, a \, (f \, b)) \, [] \, []
\]
Both sides are empty lists, so the equality holds.
- **Subcase 2: \( l_2 \) is non-empty:**
\[
\text{zipWithAll} \, g \, [] \, (\text{map} \, f \, (b :: l_2')) = \text{zipWithAll} \, (\lambda a \, b, \, g \, a \, (f \, b)) \, [] \, (b :: l_2')
\]
Both sides are empty lists, so the equality holds.

**Inductive Step:**
2. **\( l_1 \) is non-empty:**
- **Subcase 1: \( l_2 \) is empty:**
\[
\text{zipWithAll} \, g \, (a :: l_1') \, (\text{map} \, f \, []) = \text{zipWithAll} \, (\lambda a \, b, \, g \, a \, (f \, b)) \, (a :: l_1') \, []
\]
Both sides are empty lists, so the equality holds.
- **Subcase 2: \( l_2 \) is non-empty:**
\[
\text{zipWithAll} \, g \, (a :: l_1') \, (\text{map} \, f \, (b :: l_2')) = \text{zipWithAll} \, (\lambda a \, b, \, g \, a \, (f \, b)) \, (a :: l_1') \, (b :: l_2')
\]
By the inductive hypothesis, we have:
\[
\text{zipWithAll} \, g \, l_1' \, (\text{map} \, f \, l_2') = \text{zipWithAll} \, (\lambda a \, b, \, g \, a \, (f \, b)) \, l_1' \, l_2'
\]
Using the definitions of `zipWithAll` and `map`, we can simplify the left-hand side and the right-hand side to show that they are equal.

Thus, by induction, the theorem holds for all lists \( l_1 \) and \( l_2 \). This completes the proof. \(\blacksquare\)

3. **Formal Theorem**  
example (l₁ : List α) (l₂ : List β) (f : β → β') (g : Option α → Option β' → γ) :
    zipWithAll g l₁ (l₂.map f) = zipWithAll (fun a b => g a (f <$> b)) l₁ l₂ := by sorry

4. **Prefix**
import Init.Data.List.TakeDrop
import Init.Data.List.Zip

open List
open Nat

example (l₁ : List α) (l₂ : List β) (f : β → β') (g : Option α → Option β' → γ) :
    zipWithAll g l₁ (l₂.map f) = zipWithAll (fun a b => g a (f <$> b)) l₁ l₂ := by

5. **Header Information**  
-- Init.Data.List.TakeDrop not found. --

-- Init.Data.List.Zip not found. --

