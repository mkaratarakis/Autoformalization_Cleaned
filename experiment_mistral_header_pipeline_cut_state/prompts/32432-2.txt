Below are the error message and proof state for the proof you generated. Please revise the proof accordingly starting with new prefix. DO NOT include backticks, explanations, comments, code fences or any other text before or after the proof.
6. **Error Message and Proof State**
tmp.lean:14:34: error: unknown identifier 'max_le_left'
tmp.lean:14:31: error: application type mismatch
  Nat.lt_of_lt_of_le h
argument
  h
has type
  max a b < c : Prop
but is expected to have type
  a < ?m.53 : Prop
tmp.lean:15:34: error: unknown identifier 'max_le_right'
tmp.lean:15:31: error: application type mismatch
  Nat.lt_of_lt_of_le h
argument
  h
has type
  max a b < c : Prop
but is expected to have type
  b < ?m.618 : Prop
tmp.lean:20:14: error: unknown identifier 'max_le'
tmp.lean:20:6: error: unsolved goals
case mpr.intro.m
a b c : Nat
h₁ : a < c
h₂ : b < c
⊢ Nat
tmp.lean:22:6: error: no goals to be solved
tmp.lean:12:2: error: unsolved goals
case mp.left
a b c : Nat
h : max a b < c
⊢ a < c

case mp.right
a b c : Nat
h : max a b < c
⊢ b < c
tmp.lean:10:55: error: unsolved goals
case mpr
a b c : Nat
⊢ a < c ∧ b < c → max a b < c
case mp.left
a b c : Nat
h : max a b < c
⊢ a < c

case mp.right
a b c : Nat
h : max a b < c
⊢ b < c

4. **New Prefix**  
   The initial Lean 4 code that you must build on.
import Init.Data.Nat.MinMax
import Init.Data.Nat.Log2
import Init.Data.Nat.Power2
import Init.Omega
import Init.Data.Nat.Lemmas

open Nat


example {a b c : Nat} : max a b < c ↔ a < c ∧ b < c := by
  constructor
  · intro h
    apply And.intro
