Below are the error message and proof state for the proof you generated. Please revise the proof accordingly starting with new prefix. DO NOT include backticks, explanations, comments, code fences or any other text before or after the proof.
6. **Error Message and Proof State**
tmp.lean:12:2: error: Case tag 'zero' not found.

Available tags: 'nil', 'cons'
tmp.lean:10:99: error: unsolved goals
case nil
ctx : Context
p₂ : Poly
⊢ denote ctx (mul [] p₂) = denote ctx [] * denote ctx p₂

case cons
ctx : Context
head✝ : Nat × Mon
tail✝ : List (Nat × Mon)
tail_ih✝ : ∀ (p₂ : Poly), denote ctx (mul tail✝ p₂) = denote ctx tail✝ * denote ctx p₂
p₂ : Poly
⊢ denote ctx (mul (head✝ :: tail✝) p₂) = denote ctx (head✝ :: tail✝) * denote ctx p₂
case nil
ctx : Context
p₂ : Poly
⊢ denote ctx (mul [] p₂) = denote ctx [] * denote ctx p₂

case cons
ctx : Context
head✝ : Nat × Mon
tail✝ : List (Nat × Mon)
tail_ih✝ : ∀ (p₂ : Poly), denote ctx (mul tail✝ p₂) = denote ctx tail✝ * denote ctx p₂
p₂ : Poly
⊢ denote ctx (mul (head✝ :: tail✝) p₂) = denote ctx (head✝ :: tail✝) * denote ctx p₂

4. **New Prefix**  
   The initial Lean 4 code that you must build on.
import Init.Data.Nat.Linear
import Init.Data.List.BasicAux
import Init.Data.Nat.SOM

open Nat
open SOM
open Poly
open Linear (Var hugeFuel Context Var.denote)

example (ctx : Context) (p₁ p₂ : Poly) : (p₁.mul p₂).denote ctx = p₁.denote ctx * p₂.denote ctx := by
  induction p₁ generalizing p₂
