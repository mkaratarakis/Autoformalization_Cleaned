
1. **Informal Theorem**  
Bitvector to Integer Conversion Based on Most Significant Bit : For any bitvector \( x \) of length \( w \), the integer representation of \( x \) (denoted by \( x.\text{toInt} \)) is given by:
\[
x.\text{toInt} = 
\begin{cases} 
x.\text{toNat} & \text{if } x.\text{msb} = \text{false} \\
x.\text{toNat} - 2^w & \text{if } x.\text{msb} = \text{true}
\end{cases}
\]
where \( x.\text{toNat} \) is the natural number representation of \( x \), and \( x.\text{msb} \) is the most significant bit of \( x \).

2. **Informal Proof**  
We start by using the definition of `BitVec.toInt` and the equivalence that the most significant bit (msb) of \( x \) is false if and only if \( 2 \times x.\text{toNat} < 2^w \). This simplifies our goal to:
\[
\text{if } x.\text{msb} = \text{false} \text{ then } x.\text{toNat} \text{ else } x.\text{toNat} - 2^w = \text{if } x.\text{msb} = \text{true} \text{ then } x.\text{toNat} - 2^w \text{ else } x.\text{toNat}
\]

We will discuss every possible case of \( x.\text{msb} \).

**Case 1: \( x.\text{msb} = \text{false} \)**
\[
\text{if } \text{false} = \text{false} \text{ then } x.\text{toNat} \text{ else } x.\text{toNat} - 2^w = \text{if } \text{false} = \text{true} \text{ then } x.\text{toNat} - 2^w \text{ else } x.\text{toNat}
\]
This simplifies to:
\[
x.\text{toNat} = x.\text{toNat}
\]
The current goal is trivially true due to the reflexive property.

**Case 2: \( x.\text{msb} = \text{true} \)**
\[
\text{if } \text{true} = \text{false} \text{ then } x.\text{toNat} \text{ else } x.\text{toNat} - 2^w = \text{if } \text{true} = \text{true} \text{ then } x.\text{toNat} - 2^w \text{ else } x.\text{toNat}
\]
This simplifies to:
\[
x.\text{toNat} - 2^w = x.\text{toNat} - 2^w
\]
The current goal is trivially true due to the reflexive property.

Since both cases are trivially true, the theorem is proved.

3. **Formal Theorem**  
example (x : BitVec w) :
    x.toInt = if x.msb then (x.toNat : Int) - (2^w : Nat) else (x.toNat : Int) := by sorry

4. **Prefix**
import Init.Data.Bool
import Init.Data.BitVec.Basic
import Init.Data.Fin.Lemmas
import Init.Data.Nat.Lemmas
import Init.Data.Nat.Mod
import Init.Data.Int.Bitwise.Lemmas
import Init.Data.BitVec.Lemmas

open BitVec


example (x : BitVec w) :
    x.toInt = if x.msb then (x.toNat : Int) - (2^w : Nat) else (x.toNat : Int) := by

5. **Header Information**  
-- Init.Data.Bool not found. --

-- Init.Data.BitVec.Basic not found. --

-- Init.Data.Fin.Lemmas not found. --

-- Init.Data.Nat.Lemmas not found. --

-- Init.Data.Nat.Mod not found. --

-- Init.Data.Int.Bitwise.Lemmas not found. --

-- Init.Data.BitVec.Lemmas not found. --

