
1. **Informal Theorem**  
Natural Number Representation of Bitvector Subtraction : For any natural number \( n \) and any bitvectors \( x \) and \( y \) of width \( n \), the natural number representation of the bitvector \( x - y \) is given by \((x.toNat + (2^n - y.toNat)) \mod 2^n\).

2. **Informal Proof**  
We start by using the theorem that the natural number representation of the bitvector subtraction \( x - y \) is given by \((2^n - y.\text{toNat} + x.\text{toNat}) \mod 2^n\). This transforms our goal into showing that:
\[
(2^n - y.\text{toNat} + x.\text{toNat}) \mod 2^n = (x.\text{toNat} + (2^n - y.\text{toNat})) \mod 2^n
\]
Next, we use the commutativity of addition, which states that for any natural numbers \( a \) and \( b \), \( a + b = b + a \). Applying this property, we can rewrite the left-hand side of the equation as:
\[
(2^n - y.\text{toNat} + x.\text{toNat}) \mod 2^n = (x.\text{toNat} + (2^n - y.\text{toNat})) \mod 2^n
\]
Since both sides of the equation are now identical, the equality holds. Therefore, the natural number representation of the bitvector \( x - y \) is indeed \((x.\text{toNat} + (2^n - y.\text{toNat})) \mod 2^n\). This completes the proof. \(\blacksquare\)

3. **Formal Theorem**  
example {n} (x y : BitVec n) :
    (x - y).toNat = ((x.toNat + (2^n - y.toNat)) % 2^n) := by sorry

4. **Prefix**
import Init.Data.Bool
import Init.Data.BitVec.Basic
import Init.Data.Fin.Lemmas
import Init.Data.Nat.Lemmas
import Init.Data.Nat.Mod
import Init.Data.Int.Bitwise.Lemmas
import Init.Data.BitVec.Lemmas

open BitVec


example {n} (x y : BitVec n) :
    (x - y).toNat = ((x.toNat + (2^n - y.toNat)) % 2^n) := by

5. **Header Information**  
-- Init.Data.Bool not found. --

-- Init.Data.BitVec.Basic not found. --

-- Init.Data.Fin.Lemmas not found. --

-- Init.Data.Nat.Lemmas not found. --

-- Init.Data.Nat.Mod not found. --

-- Init.Data.Int.Bitwise.Lemmas not found. --

-- Init.Data.BitVec.Lemmas not found. --

