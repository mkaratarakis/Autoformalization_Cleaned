
1. **Informal Theorem**  
Underlying Natural Number of Bitvector with \( i \)-th Bit Set to 1 is \( 2^i \mod 2^w \) : For any natural numbers \( w \) and \( i \), the underlying natural number of the bitvector \( \text{twoPow}(w, i) \) is equal to \( 2^i \mod 2^w \), i.e., \(\text{toNat}(\text{twoPow}(w, i)) = 2^i \mod 2^w\).

2. **Informal Proof**  
We need to show that for any natural numbers \( w \) and \( i \), the underlying natural number of the bitvector \( \text{twoPow}(w, i) \) is equal to \( 2^i \mod 2^w \).

1. **Case \( w = 0 \):**
- The goal is to show \((\text{twoPow } 0 \, i).toNat = 2^i \mod 2^0\).
- Since \( 2^i \mod 1 = 0 \) for any natural number \( i \), and the underlying natural number of a bitvector of length 0 is 0, the goal simplifies to \((\text{twoPow } 0 \, i).toNat = 0\), which is true.

2. **Case \( w = w' + 1 \):**
- The goal is to show \((\text{twoPow } (w' + 1) \, i).toNat = 2^i \mod 2^{w' + 1}\).
- Using the definitions of `twoPow`, `toNat_shiftLeft`, and `toNat_ofNat`, we simplify the goal to \((1 \mod 2^{w' + 1}) \lll i \mod 2^{w' + 1} = 2^i \mod 2^{w' + 1}\).
- We construct a lemma \( h1 \) that states \( 1 < 2^{w' + 1} \). This is true because \( 2^{w' + 1} \) is always greater than 1 for any natural number \( w' \).
- Using the modulo identity \( a \mod b = a \) when \( a < b \), we simplify \( 1 \mod 2^{w' + 1} \) to 1.
- Using the property of left shift \( a \lll b = a \cdot 2^b \), we simplify \( 1 \lll i \mod 2^{w' + 1} \) to \( 1 \cdot 2^i \mod 2^{w' + 1} \).
- Using the multiplicative identity \( 1 \cdot a = a \), we simplify \( 1 \cdot 2^i \mod 2^{w' + 1} \) to \( 2^i \mod 2^{w' + 1} \).

Thus, the goal is satisfied in both cases, and the theorem is proved. \(\blacksquare\)

3. **Formal Theorem**  
example (w : Nat) (i : Nat) : (twoPow w i).toNat = 2^i % 2^w := by sorry

4. **Prefix**
import Init.Data.Bool
import Init.Data.BitVec.Basic
import Init.Data.Fin.Lemmas
import Init.Data.Nat.Lemmas
import Init.Data.Nat.Mod
import Init.Data.Int.Bitwise.Lemmas
import Init.Data.BitVec.Lemmas

open BitVec


example (w : Nat) (i : Nat) : (twoPow w i).toNat = 2^i % 2^w := by

5. **Header Information**  
-- Init.Data.Bool not found. --

-- Init.Data.BitVec.Basic not found. --

-- Init.Data.Fin.Lemmas not found. --

-- Init.Data.Nat.Lemmas not found. --

-- Init.Data.Nat.Mod not found. --

-- Init.Data.Int.Bitwise.Lemmas not found. --

-- Init.Data.BitVec.Lemmas not found. --

