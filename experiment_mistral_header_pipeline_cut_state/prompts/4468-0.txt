
1. **Informal Theorem**  
Minimum Element is None if and only if List is Empty: \( xs.minimum? = \text{none} \leftrightarrow xs = [] \) : For any type \( \alpha \) with a minimum operation, the minimum element of a list \( xs \) of type \( \alpha \) is `none` if and only if the list \( xs \) is empty, i.e., \( xs.minimum? = \text{none} \) if and only if \( xs = [] \).

2. **Informal Proof**  
We consider the two possible cases for the list \( xs \):

1. **Case 1: \( xs \) is empty.**
- For an empty list \( [] \), the minimum element is defined to be `none`. Therefore, \( [].minimum? = \text{none} \).
- This directly implies \( [].minimum? = \text{none} \leftrightarrow [] = [] \), which is trivially true.

2. **Case 2: \( xs \) is non-empty.**
- Let \( xs = head \mathbin{::} tail \), where \( head \) is the first element and \( tail \) is the rest of the list.
- For a non-empty list, the minimum element is defined to be the smallest element in the list, which is always `some` of an element. Therefore, \( (head \mathbin{::} tail).minimum? \neq \text{none} \).
- This leads to a contradiction with the assumption \( (head \mathbin{::} tail).minimum? = \text{none} \).

Since both cases cover all possibilities and the non-empty list case leads to a contradiction, we conclude that \( xs.minimum? = \text{none} \) if and only if \( xs = [] \).

This completes the proof.

3. **Formal Theorem**  
example {xs : List α} [Min α] : xs.minimum? = none ↔ xs = [] := by sorry

4. **Prefix**
import Init.Data.List.Lemmas
import Init.Data.List.MinMax

open List
open Nat

example {xs : List α} [Min α] : xs.minimum? = none ↔ xs = [] := by

5. **Header Information**  
-- Init.Data.List.Lemmas not found. --

-- Init.Data.List.MinMax not found. --

